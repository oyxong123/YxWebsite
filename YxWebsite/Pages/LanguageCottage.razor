@page "/languagecottage"
@layout DefaultLayout
@using Interfaces;
@using Dtos;
@using Dialogs;
@inject Radzen.DialogService DialogService
@inject ProtectedSessionStorage SessionStorage
@inject ISnackbar Snackbar
@inject ILcService LcService
@inject ILoginService LoginService
@inject ILcCategoryService ILcCategoryService

<style>
    .dialog{
        top: calc(var(--mud-appbar-height) - var(--mud-appbar-height)/6 + 20px);
    }

    .card{
        margin:20px;
    }

    .mud-card-content{
        padding-top:20px;
        padding-bottom: 30px;
        padding-left: 38px;
        padding-right: 38px;
    }

    .mud-card-content > div{
        margin-top: 15px;
        margin-bottom: 15px;
    }

    .yx-upload-fab{
        position: fixed;
        bottom: 86px;
        left: 16px;
    }

    .yx-tools-fab {
        position: fixed;
        bottom: 16px;
        left: 16px;
    }
</style>

@if (IsInitialized)
{
    <MudDrawer @bind-Open="OpenToolsDrawer" ClipMode="DrawerClipMode.Docked" Width="300px" Anchor="Anchor.End" Elevation="0" Variant="@DrawerVariant.Responsive" Style="top: calc(var(--mud-appbar-height) - var(--mud-appbar-height)/4 + 1px);">
        <MudDrawerHeader Class="d-flex justify-content-center" Style="height:40px; min-height:40px;">
            <MudStack AlignItems="MudBlazor.AlignItems.Center" Spacing="0">
                <MudText Typo="Typo.body1"><strong><u>Tools</u></strong></MudText>
                <div>
                    @if (loginUser.IsAdmin)
                    {
                        <MudIconButton OnClick="AddLcCategory" Icon="@Icons.Material.Filled.Add" Color="Color.Success" />
                    }
                    <MudIconButton OnClick="ConfirmLcCategorySwitch" Icon="@Icons.Material.Filled.ChangeCircle" Color="Color.Success" />
                    @if (loginUser.IsAdmin)
                    {
                        <MudIconButton OnClick="ModifyLcCategory" Icon="@Icons.Material.Filled.Edit" Color="Color.Success" />
                    }
                </div>
            </MudStack>
        </MudDrawerHeader>
        <MudNavMenu Class="d-flex justify-content-center">
            <MudStack Spacing="1">
                <RadzenLabel Component="LcCategoryDropdown" class="mx-3 mt-5 p-1"><strong>LC Category</strong></RadzenLabel> <!--Add a button here that opens a dialog that or changes the nav menu content to create new LC Categories-->
                <RadzenDropDown Data="lcCategoryNameList" @bind-Value="selectedLcCategoryName" @bind-Value:after="lcCategoryChanged" TValue="string" Name="LcCategoryDropdown" class="mx-3 p-2" Style="user-select: none;" />
                <MudCard Elevation="2" Class="m-3 p-2">
                    <RadzenStack Orientation="Radzen.Orientation.Vertical" Gap="2rem">
                        <RadzenColumn>
                            <MudCardMedia Image="@selectedLcCategory.ImageUri" Height="100" Class="ml-4 mr-4" Style="background-size:contain"/>
                        </RadzenColumn>
                        <RadzenColumn>
                            <MudText Typo="Typo.body2"><strong>Name:</strong></MudText>
                            <MudText Typo="Typo.body2">@selectedLcCategory.Name</MudText>
                        </RadzenColumn>
                        <RadzenColumn>
                            <MudText Typo="Typo.body2"><strong>Category:</strong></MudText>
                            <MudText Typo="Typo.body2">@selectedLcCategory.Type</MudText>
                        </RadzenColumn>
                        <RadzenColumn>
                            <MudText Typo="Typo.body2"><strong>Description:</strong></MudText>
                            <MudText Typo="Typo.body2">@selectedLcCategory.Description</MudText>
                        </RadzenColumn>
                    </RadzenStack>
                </MudCard>
            </MudStack>
        </MudNavMenu>
    </MudDrawer>

    <h3>Language Cottage</h3>

    <MudContainer MaxWidth="MaxWidth.Small">
        @foreach (LcDto lc in lcDtoDisplayList)
        {
            <MudCard Class="card">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <!--placeholder-->
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.overline">@currentLcCategoryName</MudText>
                        <MudText Typo="Typo.body1">@lc.RecordIdString</MudText>
                    </CardHeaderContent>
                    <!--or maybe make it check a boolean from a button on page that triggers the edit mode?-->
                    <CardHeaderActions>
                        @if (loginUser.IsAdmin)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Success" OnClick="lcEditDto => lcEdit(lc)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="lcDeleteDto => lcDelete(lc)" />
                        }
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardMedia Image="@lc.ImageUri" Height="250" Class="ml-4 mr-4" Style="background-size:contain"/>
                <MudCardContent>
                    <div>
                        <MudText Typo="Typo.body2" Class="font-italic font-weight-bold">Original Text:</MudText>
                        <MudText Typo="Typo.body2">@lc.OriginalText</MudText>
                    </div>
                    <div>
                        <MudText Typo="Typo.body2" Class="font-italic font-weight-bold">Romaji:</MudText>
                        <MudText Typo="Typo.body2">@lc.Romaji</MudText>
                    </div>
                    <div>
                        <MudText Typo="Typo.body2" Class="font-italic font-weight-bold">Translation:</MudText>
                        <MudText Typo="Typo.body2">@lc.EnglishTranslation</MudText>
                    </div>
                    <div>
                        <MudText Typo="Typo.body2" Class="font-italic font-weight-bold">Commentary:</MudText>
                        <MudText Typo="Typo.body2">@lc.Commentary</MudText>
                    </div>
                </MudCardContent>
            </MudCard>
        }
    </MudContainer>


    <div>
        <MudScrollToTop>
            <MudFab StartIcon="@Icons.Material.Filled.ArrowCircleUp" Color="Color.Tertiary" />
        </MudScrollToTop>
        @if (loginUser.IsAdmin)
        {
            <MudFab OnClick="lcUpload" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" Class="yx-upload-fab" aria-label="Upload"></MudFab>
        }
        <MudFab OnClick="(() => ToggleToolsDrawer())" StartIcon="@(OpenToolsDrawer ? Icons.Material.Filled.ArrowForward : Icons.Material.Filled.AutoStories)" Color="Color.Success" Class="yx-tools-fab" aria-label="Tools"></MudFab>
    </div>
}
else
{
    <RadzenProgressBarCircular ShowValue Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium" class="center-loading">
         <Template>Wait</Template>
     </RadzenProgressBarCircular>
}

@code {
    private List<LcDto> lcDtoDisplayList = new();
    private List<LcCategoryDto> lcCategoryList = new();
    private IEnumerable<string> lcCategoryNameList = Enumerable.Empty<string>();
    private LoginDto loginUser = new();
    private bool IsInitialized = false;
    private bool OpenToolsDrawer = true;
    private string selectedLcCategoryName = "";
    private string currentLcCategoryName = "";
    private int currentLcCategoryId => lcCategoryList.Where(u => u.Name == currentLcCategoryName).Single().Id;
    private LcCategoryDto selectedLcCategory = new();

    protected override async Task OnInitializedAsync()
    {
        lcCategoryList = await ILcCategoryService.GetAllLcCategories();
        lcCategoryNameList = lcCategoryList.Select(u => u.Name).ToList();
        if (lcCategoryNameList.Any())
        {
            selectedLcCategoryName = lcCategoryNameList.First();
            lcCategoryChanged();
            await ConfirmLcCategorySwitch();
        }
        IsInitialized = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var sessionData = await SessionStorage.GetAsync<int>("UserSessionId");
            if (sessionData.Success)
            {
                int loginId = sessionData.Value;
                loginUser = await LoginService.GetLogin(loginId);
            }
        }
    }

    private async Task lcUpload()
    {
        await DialogService.OpenAsync<LcDialog>("New LC Upload", new Dictionary<string, object> { { "IsEditForm", false }, { "PassedLcId", 0 }, { "PassedLcCategoryId", currentLcCategoryId } }, new Radzen.DialogOptions() { CssClass = "dialog", Height = "85%", Width = "700px" });
        await ConfirmLcCategorySwitch();
        StateHasChanged();
    }

    private async Task lcEdit(LcDto lcEditDto)
    {
        await DialogService.OpenAsync<LcDialog>("Edit LC Record", new Dictionary<string, object> { { "IsEditForm", true }, { "PassedLcId", lcEditDto.Id }, { "PassedLcCategoryId", currentLcCategoryId } }, new Radzen.DialogOptions() { CssClass = "dialog", Height = "85%", Width = "700px" });
        await ConfirmLcCategorySwitch();
        StateHasChanged();
    }

    private async Task lcDelete(LcDto lcDeleteDto)
    {
        try
        {
            bool? dialogResult = await DialogService.Confirm("Delete LcRecord [Record ID: #" + lcDeleteDto.RecordId + "]?", "Language Cottage", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
            if (dialogResult == true)
            {
                await LcService.DeleteLcRecord(lcDeleteDto);
                await ConfirmLcCategorySwitch();
                StateHasChanged();
                Snackbar.Add("Deleted LC record.", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.ToString(), Severity.Error);
        }
    }

    private void lcCategoryChanged()
    {
        try
        {
            selectedLcCategory = lcCategoryList.Single(u => u.Name == selectedLcCategoryName);
            selectedLcCategory.ImageUri = "data:image/jpeg;base64," + Convert.ToBase64String(selectedLcCategory.Image);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.ToString(), Severity.Error);
        }
    }

    private async Task UpdateLcCategory(int? newlySelectedLcCategoryId)
    {
        lcCategoryList = await ILcCategoryService.GetAllLcCategories();
        lcCategoryNameList = lcCategoryList.Select(u => u.Name).ToList();
        if (lcCategoryNameList.Any())
        {
            if (newlySelectedLcCategoryId != null)
            {
                selectedLcCategoryName = lcCategoryList.Single(u => u.Id == newlySelectedLcCategoryId).Name;
            }
            else
            {
                selectedLcCategoryName = lcCategoryList.Take(1).Single().Name;
            }
            lcCategoryChanged();
            await ConfirmLcCategorySwitch();
        }
        await ConfirmLcCategorySwitch();
    }

    private async Task ConfirmLcCategorySwitch()
    {
        try
        {
            lcCategoryChanged();
            lcDtoDisplayList = await LcService.GetAllLcRecordByLcCategory(selectedLcCategory.Id);
            foreach (LcDto lc in lcDtoDisplayList)
            {
                lc.RecordIdString = "#" + lc.RecordId.ToString();
                lc.ImageUri = "data:image/jpeg;base64," + Convert.ToBase64String(lc.Image);
            }
            currentLcCategoryName = selectedLcCategory.Name;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.ToString(), Severity.Error);
        }
    }

    private async Task AddLcCategory()
    {
        LcCategoryDto? addedLcCategory = await DialogService.OpenAsync<LcCategoryDialog>("Add LC Category", new Dictionary<string, object> { { "IsEditForm", false }, { "PassedLcCategoryId", 0 } }, new Radzen.DialogOptions() { CssClass = "dialog", Height = "85%", Width = "700px" });
        if (addedLcCategory != null)
        {
            await UpdateLcCategory(addedLcCategory.Id);
        }
    }

    private async Task ModifyLcCategory()
    {
        try
        {
            LcCategoryDto? returnValue = await DialogService.OpenAsync<LcCategoryListDialog>("LC Categories", null, new Radzen.DialogOptions() { CssClass = "dialog", Height = "85%", Width = "700px" });

            if (returnValue == null)
            {
                return;
            }

            if (returnValue.Operation == "EDIT")
            {
                await Task.Delay(200);
                await EditLcCategory(returnValue);
                await UpdateLcCategory(returnValue.Id);
            }
            else if (returnValue.Operation == "DELETE")
            {
                await UpdateLcCategory(null);
            }
            else
            {
                throw new Exception("No correct value found.");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.ToString(), Severity.Error);
        }

    }

    private async Task EditLcCategory(LcCategoryDto modifyingLcCategory)
    {
        await DialogService.OpenAsync<LcCategoryDialog>("Edit LC Category", new Dictionary<string, object> { { "IsEditForm", true }, { "PassedLcCategoryId", modifyingLcCategory.Id } }, new Radzen.DialogOptions() { CssClass = "dialog", Height = "85%", Width = "700px" });
    }

    private void ToggleToolsDrawer()
    {
        OpenToolsDrawer = !OpenToolsDrawer;
    }
}
