@page "/languagecottage"
@layout DefaultLayout
@using Interfaces;
@using Dtos;
@using Dialogs;
@inject Radzen.DialogService DialogService
@inject ILcService ILcService

<style>
    .dialog{
        top: calc(var(--mud-appbar-height) - var(--mud-appbar-height)/6 + 20px);
    }

    .card{
        margin:20px;
    }
</style>

@if (IsInitialized)
{
    <h3>LanguageCottage</h3>

    <MudContainer MaxWidth="MaxWidth.Small">
        @foreach (LcDto lc in lcDtoDisplayList)
        {
            <MudCard Class="card">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <!--placeholder-->
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body1">@lc.RecordIdString</MudText>
                        <MudText Typo="Typo.body2">placeholder</MudText>
                    </CardHeaderContent>
                    <!--Only show this control if current login mode is admin-->
                    <!--or maybe make it check a boolean from a button on page that triggers the edit mode?-->
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Default" OnClick="lcEditDto => lcEdit(lc)" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardMedia Image="@lc.ImageUrl" Height="768" Style="height: 40vh" Title="@lc.RecordIdString" />
                <MudCardContent>
                    <MudText Typo="Typo.body2">@lc.Commentary</MudText>
                </MudCardContent>
            </MudCard>
        }
    </MudContainer>

    <div>
        <MudScrollToTop>
            <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ArrowCircleUp" />
        </MudScrollToTop>
        <MudFab StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" aria-label="Upload" OnClick="lcUpload"></MudFab>
    </div>
}

@code {
    List<LcDto> lcDtoDisplayList = new();
    private bool IsInitialized = false;

    protected override async Task OnParametersSetAsync()
    {
        lcDtoDisplayList = await ILcService.GetAllLcRecord();

        foreach (LcDto lc in lcDtoDisplayList)
        {
            lc.RecordIdString = "#" + lc.RecordId.ToString();
            lc.ImageUrl = "data:image/jpeg;base64," + Convert.ToBase64String(lc.Image);
        }

        IsInitialized = true;

        await base.OnParametersSetAsync();
    }

    private async Task lcUpload()
    {
        await DialogService.OpenAsync<LcDialog>("New LC Upload", new Dictionary<string, object> { { "IsEditForm", false }, { "PassedLcId", 0 } }, new Radzen.DialogOptions() { CssClass="dialog", Draggable = false, Height="85%" });
        await OnParametersSetAsync();
        StateHasChanged();
    }

    private async Task lcEdit(LcDto lcEditDto)
    {
        await DialogService.OpenAsync<LcDialog>("Edit LC Record", new Dictionary<string, object> { { "IsEditForm", true }, { "PassedLcId", lcEditDto.Id } }, new Radzen.DialogOptions() { CssClass = "dialog", Draggable = false, Height = "85%" });
        await OnParametersSetAsync();
        StateHasChanged();
    }
}
