@page "/languagecottage"
@layout DefaultLayout
@using Interfaces;
@using Dtos;
@using Dialogs;
@inject Radzen.DialogService DialogService
@inject ProtectedSessionStorage SessionStorage
@inject ISnackbar Snackbar
@inject ILcService LcService
@inject ILoginService LoginService
@inject ILcCategoryService LcCategoryService

<style>
    .dialog{
        top: calc(var(--mud-appbar-height) - var(--mud-appbar-height)/6 + 20px);
    }

    .card{
        margin:20px;
    }

    .mud-card-content{
        padding: 38px;
    }

    .mud-card-content > div{
        margin-top: 15px;
        margin-bottom: 15px;
    }

    .yx-upload-fab{
        position: fixed;
        bottom: 16px;
        left: 16px;
    }
</style>

@if (IsInitialized)
{
    <h3>Language Cottage</h3>

    <MudDrawer Open Width="300px" Anchor="Anchor.End" Elevation="2" Variant="@DrawerVariant.Responsive">
         <MudDrawerHeader>
             <MudText Typo="Typo.body2">Tools</MudText>
         </MudDrawerHeader>
         <MudNavMenu>
             <!--Refer to radzen dropdown documentation on how to bind object-->
             <RadzenDropDown TValue="LcCategoryDto" Data="lcCategoryList" valu/>
         </MudNavMenu>
     </MudDrawer>

    <MudContainer MaxWidth="MaxWidth.Small">
        @foreach (LcDto lc in lcDtoDisplayList)
        {
            <MudCard Class="card">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <!--placeholder-->
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.overline">英雄伝説 空の軌跡 The 3rd</MudText> <!--Change this so that it displays whatever game or media these records are from-->
                        <MudText Typo="Typo.body1">@lc.RecordIdString</MudText>
                    </CardHeaderContent>
                    <!--or maybe make it check a boolean from a button on page that triggers the edit mode?-->
                    <CardHeaderActions>
                        @if (loginUser.IsAdmin)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Success" OnClick="lcEditDto => lcEdit(lc)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="lcDeleteDto => lcDelete(lc)" />
                        }
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardMedia Image="@lc.ImageUrl" Height="250" Class="ml-4 mr-4" Style="background-size:contain"/>
                <MudCardContent>
                    <div>
                        <MudText Typo="Typo.body2" Class="font-italic font-weight-bold">Original Text:</MudText>
                        <MudText Typo="Typo.body2">@lc.OriginalText</MudText>
                    </div>
                    <div>
                        <MudText Typo="Typo.body2" Class="font-italic font-weight-bold">Romaji:</MudText>
                        <MudText Typo="Typo.body2">@lc.Romaji</MudText>
                    </div>
                    <div>
                        <MudText Typo="Typo.body2" Class="font-italic font-weight-bold">Translation:</MudText>
                        <MudText Typo="Typo.body2">@lc.EnglishTranslation</MudText>
                    </div>
                    <div>
                        <MudText Typo="Typo.body2" Class="font-italic font-weight-bold">Commentary:</MudText>
                        <MudText Typo="Typo.body2">@lc.Commentary</MudText>
                    </div>
                </MudCardContent>
            </MudCard>
        }
    </MudContainer>


    <div>
        <MudScrollToTop>
            <MudFab StartIcon="@Icons.Material.Filled.ArrowCircleUp" Color="Color.Tertiary" />
        </MudScrollToTop>
        @if (loginUser.IsAdmin)
        {
            <MudFab OnClick="lcUpload" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" Class="yx-upload-fab" aria-label="Upload"></MudFab>
        }
    </div>
}

@code {
    private List<LcDto> lcDtoDisplayList = new();
    private IEnumerable<LcCategoryDto> lcCategoryList = Enumerable.Empty<LcCategoryDto>();
    private LoginDto loginUser = new();
    private bool IsInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var sessionData = await SessionStorage.GetAsync<int>("UserSessionId");
            if (sessionData.Success)
            {
                int loginId = sessionData.Value;
                loginUser = await LoginService.GetLogin(loginId);
            }
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        lcDtoDisplayList = await LcService.GetAllLcRecord();
        foreach (LcDto lc in lcDtoDisplayList)
        {
            lc.RecordIdString = "#" + lc.RecordId.ToString();
            lc.ImageUrl = "data:image/jpeg;base64," + Convert.ToBase64String(lc.Image);
        }

        lcCategoryList = await LcCategoryService.GetAllLcCategories();

        IsInitialized = true;

        await base.OnParametersSetAsync();
    }

    private async Task lcUpload()
    {
        await DialogService.OpenAsync<LcDialog>("New LC Upload", new Dictionary<string, object> { { "IsEditForm", false }, { "PassedLcId", 0 } }, new Radzen.DialogOptions() { CssClass="dialog", Height="85%", Width="700px"});
        await OnParametersSetAsync();
        StateHasChanged();
    }

    private async Task lcEdit(LcDto lcEditDto)
    {
        await DialogService.OpenAsync<LcDialog>("Edit LC Record", new Dictionary<string, object> { { "IsEditForm", true }, { "PassedLcId", lcEditDto.Id } }, new Radzen.DialogOptions() { CssClass = "dialog", Height = "85%", Width="700px" });
        await OnParametersSetAsync();
        StateHasChanged();
    }

    private async Task lcDelete(LcDto lcDeleteDto)
    {
        bool? dialogResult = await DialogService.Confirm("Delete LcRecord [Record ID: #" + lcDeleteDto.RecordId + "]?", "Language Cottage", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (dialogResult == true)
        {
            await LcService.DeleteLcRecord(lcDeleteDto);
            await OnParametersSetAsync();
            StateHasChanged();
            Snackbar.Add("Deleted LC record.", Severity.Success);
        }
    }
}
