
@using Dtos;
@using Interfaces;
@inject Radzen.DialogService DialogService
@inject ILcService ILcService
@inject ISnackbar Snackbar

<style>
    .yx-center{
        display: flex;
        text-align: center;
        justify-content: center;   
        margin:auto;
    }

    .yx-img{
        height: 100%;
        width: 100%;
        background-size: contain; 
        background-repeat: no-repeat;
        background-position: 50% 50%;
    }
</style>

<RadzenStack Gap="1.5rem">
    <RadzenStack width="100%">
        <RadzenStack>
            <MudFileUpload T="IBrowserFile" @bind-Files="imageFile" OnFilesChanged="OnInputFileChanged" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0" @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                <ButtonTemplate>
                    @if (imageUploaded)
                    {
                        <MudPaper Height="300px" Width="300px" Outlined="true" Class="@DragClass">
                            <MudImage Src="@imageFileUrl" Alt="Image for Upload" Elevation="25" Class="rounded-lg yx-img" />
                        </MudPaper>
                    }
                    else
                    {
                        <MudPaper Height="250px" Outlined="true" Class="@DragClass">
                            <MudText Class="yx-center">Drop picture</MudText>
                        </MudPaper>
                    }
                </ButtonTemplate>
            </MudFileUpload>
        </RadzenStack>
        <RadzenStack>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Original Text</RadzenText>
            <RadzenTextArea @bind-Value="lcForm.OriginalText" class="w-100" />
        </RadzenStack>
        <RadzenStack>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Romaji</RadzenText>
            <RadzenTextArea @bind-Value="lcForm.Romaji" class="w-100" />
        </RadzenStack>
        <RadzenStack>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Englsih Translation</RadzenText>
            <RadzenTextArea @bind-Value="lcForm.EnglishTranslation" class="w-100" />
        </RadzenStack>
        <RadzenStack>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Commentary</RadzenText>
            <RadzenTextArea @bind-Value="lcForm.Commentary" class="w-100" />
        </RadzenStack>
    </RadzenStack>
    

    <RadzenStack Orientation="Radzen.Orientation.Horizontal" Gap="0.5rem" JustifyContent="JustifyContent.End">
        <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Shine!!" Click="UploadLcRecord" Style="width: 80px;" />
        <RadzenButton Text="Cancel" Click="closeDialog" ButtonStyle="ButtonStyle.Light" />
    </RadzenStack>
</RadzenStack>


@code {
    [Parameter] public bool IsEditForm { get; set; }
    [Parameter] public int PassedLcId { get; set; }

    private LcDto lcForm = new()
        {
            Romaji = "",
            OriginalText = "",
            EnglishTranslation = "",
            Image = Array.Empty<byte>(),
            AddedDateTime = DateTime.Now,
            LastModifiedDateTime = DateTime.Now
        };

    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10 yx-center";
    private string DragClass = DefaultDragClass;
    private bool imageUploaded = false;

    private IBrowserFile imageFile;
    private byte[] imageFileBytes = {};
    private string imageFileSrc = "";
    private string imageFileUrl = "";

    protected override async Task OnInitializedAsync()
    {
        if (!IsEditForm)
        {

        }
        else
        {
            lcForm = await ILcService.GetLcRecordById(PassedLcId); 
        }

        await base.OnInitializedAsync();
    }

    private async Task ProcessLcRecord()
    {
        if (!IsEditForm)
        {
            await UploadLcRecord();
        }
        else
        {
            await EditLcRecord();
        }
    }

    private async Task UploadLcRecord()
    {
        try
        {
            LcDto lcDto = new()
                {
                    RecordId = lcForm.RecordId,
                    Romaji = lcForm.Romaji,
                    OriginalText = lcForm.OriginalText,
                    EnglishTranslation = lcForm.EnglishTranslation,
                    Commentary = lcForm.Commentary,
                    Image = imageFileBytes
                };

            lcDto = await ILcService.UploadLcRecord(lcDto);

            // Add audit trails.

            Snackbar.Add("Lc Record Uploaded Successfully!~~", Severity.Success);

            closeDialog();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Lc Record Upload Failed.", Severity.Error);
            Snackbar.Add(ex.ToString(), Severity.Error);
        }
    }

    private async Task EditLcRecord()
    {
        try
        {
            LcDto lcDto = new()
                {
                    RecordId = lcForm.RecordId,
                    Romaji = lcForm.Romaji,
                    OriginalText = lcForm.OriginalText,
                    EnglishTranslation = lcForm.EnglishTranslation,
                    Commentary = lcForm.Commentary,
                    Image = imageFileBytes,
                    LastModifiedDateTime = DateTime.Now
                };

            await ILcService.EditLcRecord(lcDto);

            // Add audit trails.

            Snackbar.Add("Lc Record Edited Successfully!~~", Severity.Success);

            closeDialog();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Lc Record Edit Failed.", Severity.Error);
            Snackbar.Add(ex.ToString(), Severity.Error);
        }
    }

    private void closeDialog()
    {
        DialogService.Close(true);
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();

        Stream stream = imageFile.OpenReadStream(imageFile.Size);
        using MemoryStream memoryString = new MemoryStream();
        await stream.CopyToAsync(memoryString);
        imageFileBytes = memoryString.GetBuffer();
        imageFileSrc = Convert.ToBase64String(imageFileBytes);
        imageFileUrl = string.Format("data:image/jpeg;base64,{0}", imageFileSrc);
        
        imageUploaded = true;
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}
