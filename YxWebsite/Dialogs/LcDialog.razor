
@using Dtos;
@using Interfaces;
@inject Radzen.DialogService DialogService
@inject ILcService ILcService
@inject ISnackbar Snackbar

<style>
    .yx-center{
        display: flex;
        text-align: center;
        justify-content: center;   
        margin:auto;
    }

    .yx-img{
        height: 100%;
        width: 100%;
        background-size: contain; 
        background-repeat: no-repeat;
        background-position: 50% 50%;
    }

    .rz-stack{
        gap: 0px;
    }
</style>

<RadzenTemplateForm TItem="LcDto" Data="lcForm" Submit="ProcessLcRecord" class="modal-body">
    <RadzenStack Gap="1.5rem">
        <RadzenStack width="100%">
            <RadzenStack>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Image (16:9)<span class="text-danger">*</span></RadzenText>
                <MudFileUpload T="IBrowserFile" @bind-Files="imageFile" OnFilesChanged="OnInputFileChanged" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0" @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                    <ButtonTemplate Context="Image">
                        @if (imageUploaded)
                        {
                            <MudPaper Height="200px" Width="356px" Outlined="true" Class="@DragClass">
                                <MudImage Src="@lcForm.ImageUrl" Alt="Image for Upload" Elevation="25" Class="rounded-lg yx-img" />
                            </MudPaper>
                        }
                        else
                        {
                            <MudPaper Height="200px" Width="356px" Outlined="true" Class="@DragClass">
                                <MudText Class="yx-center">Drop picture</MudText>
                            </MudPaper>
                        }
                    </ButtonTemplate>
                </MudFileUpload>
            </RadzenStack>
            <RadzenStack>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">
                    Record ID 
                    @if (IsEditForm)
                    {
                        <span class="text-danger">*</span>
                    }
                </RadzenText>
                <RadzenFormField>
                    <ChildContent>
                        <RadzenTextArea Name="RecordIdString" @bind-Value="lcForm.RecordIdString" class="w-100" />
                    </ChildContent>
                    <Helper>
                        <RadzenCustomValidator Component="RecordIdString" Validator="@(() => ValidateRecordIdString(lcForm.RecordIdString))" Text="@validatorTextRecordIdString" Popup />
                    </Helper>
                </RadzenFormField>
            </RadzenStack>
            <RadzenStack>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Original Text</RadzenText>
                <RadzenTextArea @bind-Value="lcForm.OriginalText" class="w-100" />
            </RadzenStack>
            <RadzenStack>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Romaji</RadzenText>
                <RadzenTextArea @bind-Value="lcForm.Romaji" class="w-100" />
            </RadzenStack>
            <RadzenStack>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Englsih Translation<span class="text-danger">*</span></RadzenText>
                <RadzenFormField>
                    <ChildContent>
                        <RadzenTextArea Name="EnglishTranslation" @bind-Value="lcForm.EnglishTranslation" class="w-100" />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="EnglishTranslation" Text="English Translation is required" Popup=true Style="position: absolute" />
                    </Helper>
                </RadzenFormField>
            </RadzenStack>
            <RadzenStack>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Commentary</RadzenText>
                <RadzenTextArea @bind-Value="lcForm.Commentary" class="w-100" />
            </RadzenStack>
        </RadzenStack>
        <RadzenStack Orientation="Radzen.Orientation.Horizontal" Gap="0.5rem" JustifyContent="JustifyContent.End">
            <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Shine!!" Style="width: 80px;" />
            <RadzenButton Text="Cancel" Click="closeDialog" ButtonStyle="ButtonStyle.Light" />
        </RadzenStack>
     </RadzenStack>
 </RadzenTemplateForm>

 @code {
    [Parameter] public bool IsEditForm { get; set; }
    [Parameter] public int PassedLcId { get; set; }

    private LcDto lcForm = new()
        {
            AddedDateTime = DateTime.UtcNow,
            LastModifiedDateTime = DateTime.UtcNow
        };

    private IBrowserFile? imageFile;
    private bool imageUploaded = false;

    // Css variables
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mud-width-full mud-height-full z-10 yx-center";
    private string DragClass = DefaultDragClass;

    // Validator text variables.
    private string validatorTextRecordIdString = "F"; //fill this validator string?

    protected override async Task OnInitializedAsync()
    {
        if (IsEditForm)
        {
            LcDto lcDto = await ILcService.GetLcRecordById(PassedLcId);
            lcForm = lcDto.ShallowCopy();
            lcForm.ImageUrl = string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(lcForm.Image));
            lcForm.RecordIdString = lcForm.RecordId.ToString();
            imageUploaded = true;
        }

        await base.OnInitializedAsync();
    }

    private async Task ProcessLcRecord()
    {
        try
        {
            lcForm.RecordIdString = lcForm.RecordIdString.Trim();

            if (!IsEditForm)
            {
                int.TryParse(lcForm.RecordIdString, out int parsedRecordId);
                lcForm.RecordId = parsedRecordId;
                await UploadLcRecord();
            }
            else
            {
                int.TryParse(lcForm.RecordIdString, out int parsedRecordId);
                lcForm.RecordId = parsedRecordId;
                await EditLcRecord();
            }
        }
        catch (Exception ex)
        {
            snackbarFailed(ex);
        }
    }

    private async Task UploadLcRecord()
    {
        try
        {
            LcDto lcUploadDto = new()
                {
                    RecordId = lcForm.RecordId,
                    Romaji = lcForm.Romaji.Trim(),
                    OriginalText = lcForm.OriginalText.Trim(),
                    EnglishTranslation = lcForm.EnglishTranslation.Trim(),
                    Commentary = lcForm.Commentary?.Trim(),
                    Image = lcForm.Image,
                    AddedDateTime = DateTime.UtcNow,
                    LastModifiedDateTime = DateTime.UtcNow,
                    LcCategoryId = 1 //temporary placeholder
                };

            lcUploadDto = await ILcService.UploadLcRecord(lcUploadDto);

            Snackbar.Add("Lc Record Uploaded Successfully!~~", Severity.Success);

            closeDialog();
        }
        catch (Exception ex)
        {
            snackbarFailed(ex);
        }
    }

    private async Task EditLcRecord()
    {
        try
        {
            LcDto lcEditDto = new()
                {
                    Id = lcForm.Id,
                    RecordId = lcForm.RecordId,
                    Romaji = lcForm.Romaji.Trim(),
                    OriginalText = lcForm.OriginalText.Trim(),
                    EnglishTranslation = lcForm.EnglishTranslation.Trim(),
                    Commentary = lcForm.Commentary?.Trim(),
                    Image = lcForm.Image,
                    LastModifiedDateTime = DateTime.UtcNow,
                    LcCategoryId = 1 //temporary placeholder
                };

            await ILcService.EditLcRecord(lcEditDto, PassedLcId);

            Snackbar.Add("Lc Record Edited Successfully!~~", Severity.Success);

            closeDialog();
        }
        catch (Exception ex)
        {
            snackbarFailed(ex);
        }
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();

        if (imageFile != null)
        {
            Stream stream = imageFile.OpenReadStream(imageFile.Size);
            using MemoryStream memoryString = new MemoryStream();
            await stream.CopyToAsync(memoryString);
            lcForm.Image = memoryString.GetBuffer();
            lcForm.ImageUrl = string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(lcForm.Image));
        }

        imageUploaded = true;
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

    private bool ValidateRecordIdString(string recordIdString)
    {
        int recordId = 0;
        lcForm.RecordIdString = lcForm.RecordIdString.Trim();

        if (!IsEditForm)
        {
            int.TryParse(lcForm.RecordIdString, out recordId);
        }
        else
        {
            // Record ID is required in Edit Mode.
            if (lcForm.RecordIdString == "")
            {
                validatorTextRecordIdString = "Record ID is required";
                return false;
            }

            int.TryParse(lcForm.RecordIdString, out recordId);
        }

        if (recordId <= 0)
        {
            validatorTextRecordIdString = "Record ID must be a number that's > 0";
            return false;
        }

        return true;
    }

    private void snackbarFailed(Exception ex)
    {
        Snackbar.Add("Something went wrong.", Severity.Error);
        Snackbar.Add(ex.ToString(), Severity.Error);
    }

    private void closeDialog()
    {
        DialogService.Close();
    }
}
