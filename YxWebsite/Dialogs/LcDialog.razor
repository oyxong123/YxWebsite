
@using Dtos;
@using Interfaces;
@inject Radzen.DialogService DialogService
@inject ILcService ILcService
@inject ISnackbar Snackbar

<style>
    .yx-center{
        display: flex;
        text-align: center;
        justify-content: center;   
        margin:auto;
    }

    .yx-img{
        height: 100%;
        width: 100%;
        background-size: contain; 
        background-repeat: no-repeat;
        background-position: 50% 50%;
    }
</style>

@if (IsInitialized)
{
    <RadzenTemplateForm TItem="LcDto" Data="lcForm" Submit="ProcessLcRecord" class="modal-body">
        <RadzenStack Gap="1.5rem">
            <RadzenStack>
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Image (16:9)<span class="text-danger">*</span></RadzenText>
                    <MudFileUpload T="IBrowserFile" @bind-Files="imageFile" OnFilesChanged="OnImageFileChanged" Hidden="false" Class="flex-1 py-3" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0" @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                        <ButtonTemplate Context="Image">
                            @if (imageUploaded)
                            {
                                <MudPaper Height="246px" Width="386px" Outlined Class="@DragClass" Style="padding:8px !important">
                                    <MudImage Src="@lcForm.ImageUri" Alt="Image for Upload" Elevation="25" Class="rounded-lg yx-img" />
                                </MudPaper>
                            }
                            else
                            {
                                <MudPaper Height="230px" Width="386px" Outlined Class="@DragClass">
                                    <MudText Class="yx-center">Drop picture</MudText>
                                </MudPaper>
                            }
                        </ButtonTemplate>
                    </MudFileUpload>
                </RadzenColumn>
            </RadzenStack>
            <RadzenStack>
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Englsih Translation<span class="text-danger">*</span></RadzenText>
                    <RadzenFormField class="w-100">
                        <ChildContent>
                            <RadzenTextArea Name="EnglishTranslation" @bind-Value="lcForm.EnglishTranslation" class="w-100" />
                        </ChildContent>
                        <Helper>
                            <RadzenRequiredValidator Component="EnglishTranslation" Text="English Translation is required" Popup=true Style="position: absolute" />
                        </Helper>
                    </RadzenFormField>
                </RadzenColumn>
            </RadzenStack>
            <RadzenStack>
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Original Text</RadzenText>
                    <RadzenTextArea @bind-Value="lcForm.OriginalText" class="w-100" />
                </RadzenColumn>
            </RadzenStack>
            <RadzenStack>
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Romaji</RadzenText>
                    <RadzenTextArea @bind-Value="lcForm.Romaji" class="w-100" />
                </RadzenColumn>
            </RadzenStack>
            <RadzenStack>
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Commentary</RadzenText>
                    <RadzenTextArea @bind-Value="lcForm.Commentary" class="w-100" />
                </RadzenColumn>
            </RadzenStack>
            <RadzenStack>
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">
                        Record ID
                        @if (IsEditForm)
                        {
                            <span class="text-danger">*</span>
                        }
                    </RadzenText>
                    <RadzenFormField>
                        <ChildContent>
                            <RadzenTextBox Name="RecordIdString" @bind-Value="lcForm.RecordIdString" class="w-100" />
                        </ChildContent>
                        <Helper>
                            <RadzenCustomValidator Component="RecordIdString" Validator="@(() => ValidateRecordIdString(lcForm.RecordIdString))" Text="@validatorTextRecordIdString" Popup />
                         </Helper>
                     </RadzenFormField>
                </RadzenColumn>
            </RadzenStack>
            <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.End">
                 <RadzenButton Text="Cancel" Click="(() => DialogService.Close())" ButtonStyle="ButtonStyle.Light" />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Shine!!" Style="width: 80px;" />
            </RadzenStack>
        </RadzenStack>
     </RadzenTemplateForm>
}
else
{
    <RadzenProgressBarCircular ShowValue Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium" class="center-loading">
        <Template>Wait</Template>
    </RadzenProgressBarCircular>
}

 @code {
    [Parameter] public bool IsEditForm { get; set; }
    [Parameter] public int PassedLcId { get; set; }
    [Parameter] public int PassedLcCategoryId { get; set; }
    private bool IsInitialized = false;
    private bool imageUploaded = false;
    private IBrowserFile? imageFile;
    private LcDto lcForm = new()
        {
            AddedDateTime = DateTime.UtcNow,
            LastModifiedDateTime = DateTime.UtcNow
        };

    // Css variables
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mud-width-full mud-height-full z-10 yx-center";
    private string DragClass = DefaultDragClass;

    // Validator text variables.
    private string validatorTextRecordIdString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (IsEditForm)
        {
            LcDto lcDto = await ILcService.GetLcRecordById(PassedLcId);
            lcForm = lcDto.ShallowCopy();
            lcForm.ImageUri = string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(lcForm.Image));
            lcForm.RecordIdString = lcForm.RecordId.ToString();
            imageUploaded = true;
        }
        IsInitialized = true;
    }

    private async Task ProcessLcRecord()
    {
        try
        {
            lcForm.RecordIdString = lcForm.RecordIdString.Trim();
            int.TryParse(lcForm.RecordIdString, out int parsedRecordId);
            lcForm.RecordId = parsedRecordId;

            if (!IsEditForm)
            {
                await UploadLcRecord();
            }
            else
            {
                await EditLcRecord();
            }
        }
        catch (Exception ex)
        {
            snackbarFailed(ex);
        }
    }

    private async Task UploadLcRecord()
    {
        try
        {
            LcDto lcUploadDto = new()
                {
                    RecordId = lcForm.RecordId,
                    Romaji = lcForm.Romaji.Trim(),
                    OriginalText = lcForm.OriginalText.Trim(),
                    EnglishTranslation = lcForm.EnglishTranslation.Trim(),
                    Commentary = lcForm.Commentary?.Trim(),
                    Image = lcForm.Image,
                    AddedDateTime = DateTime.UtcNow,
                    LastModifiedDateTime = DateTime.UtcNow,
                    LcCategoryId = PassedLcCategoryId
                };

            lcUploadDto = await ILcService.UploadLcRecord(lcUploadDto);

            Snackbar.Add("Lc Record Uploaded Successfully!~~", Severity.Success);

            DialogService.Close(true);
        }
        catch (Exception ex)
        {
            snackbarFailed(ex);
        }
    }

    private async Task EditLcRecord()
    {
        try
        {
            LcDto lcEditDto = new()
                {
                    Id = lcForm.Id,
                    RecordId = lcForm.RecordId,
                    Romaji = lcForm.Romaji.Trim(),
                    OriginalText = lcForm.OriginalText.Trim(),
                    EnglishTranslation = lcForm.EnglishTranslation.Trim(),
                    Commentary = lcForm.Commentary?.Trim(),
                    Image = lcForm.Image,
                    LastModifiedDateTime = DateTime.UtcNow,
                    LcCategoryId = PassedLcCategoryId
                };

            await ILcService.EditLcRecord(lcEditDto, PassedLcId);

            Snackbar.Add("Lc Record Edited Successfully!~~", Severity.Success);

            DialogService.Close(true);
        }
        catch (Exception ex)
        {
            snackbarFailed(ex);
        }
    }

    private async Task OnImageFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();

        if (imageFile != null)
        {
            byte[] imageBytes;
            Stream stream = imageFile.OpenReadStream(imageFile.Size);
            using (MemoryStream memoryString = new MemoryStream())
            {
                await stream.CopyToAsync(memoryString);
                imageBytes = memoryString.GetBuffer();
            }

            // imageBytes = await DialogService.OpenAsync<ImageCropperDialog>("Crop Image", new Dictionary<string, object>() { { "ImageBytes", imageBytes } });
            // if (imageBytes != null) // do the check to check file size not more than 50mb
            // {
                lcForm.Image = imageBytes;
                lcForm.ImageUri = string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(lcForm.Image));
            // }
        }

        imageUploaded = true;
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

    private bool ValidateRecordIdString(string recordIdString)
    {
        int recordId = 0;
        lcForm.RecordIdString = lcForm.RecordIdString.Trim();

        if (!IsEditForm)
        {
            int.TryParse(lcForm.RecordIdString, out recordId);

            if (recordIdString == "")
            {
                return true;
            }
        }
        else
        {
            // Record ID is required in Edit Mode.
            if (lcForm.RecordIdString == "")
            {
                validatorTextRecordIdString = "Record ID is required";
                return false;
            }

            int.TryParse(lcForm.RecordIdString, out recordId);
        }
        
        if (recordId <= 0)
        {
            validatorTextRecordIdString = "Record ID must be a number that's > 0";
            return false;
        }

        return true;
    }

    private void snackbarFailed(Exception ex)
    {
        Snackbar.Add("Something went wrong.", Severity.Error);
        Snackbar.Add(ex.ToString(), Severity.Error);
    }
}
