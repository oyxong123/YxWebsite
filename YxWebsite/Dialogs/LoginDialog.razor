@using Dtos;
@using Interfaces;
@inject Radzen.DialogService DialogService
@inject ILoginService LoginService
@inject ISnackbar Snackbar
@inject ProtectedSessionStorage SessionStorage

<RadzenTemplateForm TItem="LoginDto" Data="loginForm" Submit="ProcessForm" class="modal-body">
    <RadzenStack Gap="0.5rem">
        <RadzenStack Gap="1rem" width="100%">
            <RadzenStack Gap="0">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Username<span class="text-danger">*</span></RadzenText>
                <RadzenFormField>
                    <ChildContent>
                        <RadzenTextBox Name="Username" @bind-Value="loginForm.Username" class="w-50" />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Username" Text="Username is required" Popup=true Style="position: absolute" />
                    </Helper>
                </RadzenFormField>
            </RadzenStack>
            <RadzenStack>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Password<span class="text-danger">*</span></RadzenText>
                <RadzenFormField>
                    <ChildContent>
                        <RadzenPassword Name="Password" @bind-Value="loginForm.Password"  class="w-50" />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Password" Text="Password is required" Popup=true Style="position: absolute" />
                    </Helper>
                </RadzenFormField>
            </RadzenStack>
            @if (IsSignUpMode)
            {
                <RadzenStack>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Confirm Password<span class="text-danger">*</span></RadzenText>
                    <RadzenFormField>
                        <ChildContent>
                            <RadzenPassword Name="ConfirmPassword" @bind-Value="loginForm.ConfirmPassword" class="w-100" />
                        </ChildContent>
                        <Helper>
                            <RadzenRequiredValidator Component="ConfirmPassword" Text="Retype Password is required" Popup=true Style="position: absolute" />
                        </Helper>
                    </RadzenFormField>
                </RadzenStack>
            }
            <RadzenStack Orientation="Radzen.Orientation.Horizontal" Gap="0.5rem" JustifyContent="JustifyContent.SpaceEvenly">
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="@(IsSignUpMode ? "Sign me in!" : "Hack into my acc ;]")" />
                <RadzenButton Text="Cancel" Click="@(() => DialogService.Close())" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
            <RadzenStack>
                <RadzenLink Text="Sign up for account (it's free btw,tho I know storing passwords on other people's server are always never safe" onclick="@(() => DialogService.Close("SignUp"))" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
 </RadzenTemplateForm>

@code {
    [Parameter] public bool IsSignUpMode { get; set; } = false;
    private LoginDto loginForm = new();
    private LoginDto loginDto = new();

    private async Task ProcessForm()
    {
        loginForm.Username = loginForm.Username.Trim();

        if (IsSignUpMode)
        {
            await SignUp();
        }
        else
        {
            await Login();
        }
    }

    private async Task Login()
    {
        try
        {
            if (await LoginService.VerifyLogin(loginForm))
            {
                Snackbar.Add("Ayo~~ You're finally back!~~", Severity.Success);
                //add to session storage
                await LoginService.
                await SessionStorage.SetAsync("UserSessionId", 1);
                DialogService.Close();
            }
        }
        catch (Exception ex)
        {
            snackbarFailed(ex);
        }
    }

    private async Task SignUp()
    {
        try
        {
            await LoginService.SignUp(loginForm);
            Snackbar.Add("Idk who you are, but welcome to the club!~~", Severity.Success);
            //add to session storage
            DialogService.Close();
        }
        catch (Exception ex)
        {
            snackbarFailed(ex);
        }
    }

    private void snackbarFailed(Exception ex)
    {
        Snackbar.Add(ex.Message, Severity.Error);
    }
}
