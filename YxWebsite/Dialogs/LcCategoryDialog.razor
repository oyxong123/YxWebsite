@using Dtos;
@using Interfaces;
@inject Radzen.DialogService DialogService
@inject ILcCategoryService ILcCategoryService
@inject ISnackbar Snackbar

<style>
    .yx-center {
        display: flex;
        text-align: center;
        justify-content: center;
        margin: auto;
    }

    .yx-img {
        height: 100%;
        width: 100%;
        background-size: contain;
        background-repeat: no-repeat;
        background-position: 50% 50%;
    }
</style>

@if (IsInitialized)
{
    <RadzenTemplateForm TItem="LcCategoryDto" Data="lcCategoryForm" Submit="ProcessLcCategoryRecord" class="modal-body">
        <RadzenStack Gap="1.5rem">
            <RadzenStack>
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Image (16:9)<span class="text-danger">*</span></RadzenText>
                    <MudFileUpload T="IBrowserFile" @bind-Files="imageFile" OnFilesChanged="OnImageFileChanged" Hidden="false" Class="flex-1 py-3" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0" @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                        <ButtonTemplate Context="Image">
                            @if (imageUploaded)
                            {
                                <MudPaper Height="246px" Width="386px" Outlined Class="@DragClass" Style="padding:8px !important">
                                    <MudImage Src="@lcCategoryForm.ImageUri" Alt="Image for Upload" Elevation="25" Class="rounded-lg yx-img" />
                                </MudPaper>
                            }
                            else
                            {
                                <MudPaper Height="230px" Width="386px" Outlined Class="@DragClass">
                                    <MudText Class="yx-center">Drop picture</MudText>
                                </MudPaper>
                            }
                        </ButtonTemplate>
                    </MudFileUpload>
                </RadzenColumn>
            </RadzenStack>
            <RadzenStack>
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Name<span class="text-danger">*</span></RadzenText>
                    <RadzenFormField class="w-100">
                        <ChildContent>
                            <RadzenTextArea Name="Name" @bind-Value="lcCategoryForm.Name" class="w-100" />
                        </ChildContent>
                        <Helper>
                            <RadzenRequiredValidator Component="Name" Text="LC Category Name is required" Popup=true Style="position: absolute" />
                        </Helper>
                    </RadzenFormField>
                </RadzenColumn>
            </RadzenStack>
            <RadzenStack>
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Type</RadzenText>
                    <RadzenTextArea @bind-Value="lcCategoryForm.Type" class="w-100" />
                </RadzenColumn>
            </RadzenStack>
            <RadzenStack>
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Description</RadzenText>
                    <RadzenTextArea @bind-Value="lcCategoryForm.Description" class="w-100" />
                </RadzenColumn>
            </RadzenStack>
             <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.End">
                 <RadzenButton Text="Cancel" Click="closeDialog" ButtonStyle="ButtonStyle.Light" />
                 <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Shine!!" Style="width: 80px;" />
             </RadzenStack>
         </RadzenStack>
    </RadzenTemplateForm>
}
 else
{
    <RadzenProgressBarCircular ShowValue Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium" class="center-loading">
        <Template>Wait</Template>
    </RadzenProgressBarCircular>
}

 @code {
    [Parameter] public bool IsEditForm { get; set; }
    [Parameter] public int PassedLcCategoryId { get; set; }
    private bool IsInitialized = false;
    private bool imageUploaded = false;
    private IBrowserFile? imageFile;
    private LcCategoryDto lcCategoryForm = new();
    private LcCategoryDto originalLcCategory = new();

    // Css variables
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mud-width-full mud-height-full z-10 yx-center";
    private string DragClass = DefaultDragClass;

    protected override async Task OnInitializedAsync()
    {
        if (IsEditForm)
        {
            originalLcCategory = await ILcCategoryService.GetLcCategoryRecordById(PassedLcCategoryId);
            lcCategoryForm = originalLcCategory.ShallowCopy();
            lcCategoryForm.ImageUri = string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(lcCategoryForm.Image));
            imageUploaded = true;
        }
        IsInitialized = true;
    }

    private async Task ProcessLcCategoryRecord()
    {
        try
        {
            if (!IsEditForm)
            {
                await UploadLcCategoryRecord();
            }
            else
            {
                await EditLcCategoryRecord();
            }
        }
        catch (Exception ex)
        {
            snackbarFailed(ex);
        }
    }

    private async Task UploadLcCategoryRecord()
    {
        try
        {
            DateTime _currentDateTime = DateTime.UtcNow;

            LcCategoryDto _lcCategoryUploadDto = new()
                {
                    Image = lcCategoryForm.Image,
                    Name = lcCategoryForm.Name.Trim(),
                    Type = lcCategoryForm.Type.Trim(),
                    Description = lcCategoryForm.Description.Trim(),
                    AddedDateTime = _currentDateTime,
                    LastModifiedDateTime = _currentDateTime,
                };

            _lcCategoryUploadDto = await ILcCategoryService.UploadLcCategoryRecord(_lcCategoryUploadDto);

            Snackbar.Add("LcCategory Record Uploaded Successfully!~~", Severity.Success);

            closeDialog(_lcCategoryUploadDto);
        }
        catch (Exception ex)
        {
            snackbarFailed(ex);
        }
    }

    private async Task EditLcCategoryRecord()
    {
        try
        {
            DateTime _currentDateTime = DateTime.UtcNow;

            LcCategoryDto _lcCategoryEditDto = new()
                {
                    Id = lcCategoryForm.Id,
                    Image = lcCategoryForm.Image,
                    Name = lcCategoryForm.Name,
                    Type = lcCategoryForm.Type.Trim(),
                    Description = lcCategoryForm.Description.Trim(),
                    AddedDateTime = originalLcCategory.AddedDateTime,
                    LastModifiedDateTime = _currentDateTime,
                };

            await ILcCategoryService.EditLcCategoryRecord(_lcCategoryEditDto);

            Snackbar.Add("LcCategory Record Edited Successfully!~~", Severity.Success);

            closeDialog(null);
        }
        catch (Exception ex)
        {
            snackbarFailed(ex);
        }
    }

    private async Task OnImageFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();

        if (imageFile != null)
        {
            using (MemoryStream _memoryString = new())
            {
                Stream _stream = imageFile.OpenReadStream(imageFile.Size);
                await _stream.CopyToAsync(_memoryString);
                lcCategoryForm.Image = _memoryString.GetBuffer();
                lcCategoryForm.ImageUri = string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(lcCategoryForm.Image));
            };
        }

        imageUploaded = true;
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

    private void snackbarFailed(Exception ex)
    {
        Snackbar.Add("Something went wrong.", Severity.Error);
        Snackbar.Add(ex.ToString(), Severity.Error);
    }

    private void closeDialog(dynamic? argument)
    {
        if (argument == null)
        {
            DialogService.Close();
        }
        else
        {
            DialogService.Close(argument);
        }
    }
}
