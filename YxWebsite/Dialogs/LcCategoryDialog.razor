@using Dtos;
@using Interfaces;
@inject Radzen.DialogService DialogService
@inject ILcCategoryService ILCategorycService
@inject ISnackbar Snackbar

<style>
    .yx-center {
        display: flex;
        text-align: center;
        justify-content: center;
        margin: auto;
    }

    .yx-img {
        height: 100%;
        width: 100%;
        background-size: contain;
        background-repeat: no-repeat;
        background-position: 50% 50%;
    }
</style>

<RadzenTemplateForm TItem="LcCategoryDto" Data="lcCategoryForm" Submit="ProcessLcCategoryRecord" class="modal-body">
    <RadzenStack Gap="1.5rem">
        <RadzenStack>
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Image (16:9)<span class="text-danger">*</span></RadzenText>
                <MudFileUpload T="IBrowserFile" @bind-Files="imageFile" OnFilesChanged="OnImageFileChanged" Hidden="false" Class="flex-1 py-3" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0" @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                    <ButtonTemplate Context="Image">
                        @if (imageUploaded)
                        {
                            <MudPaper Height="246px" Width="386px" Outlined="true" Class="@DragClass" Style="padding:8px !important">
                                <MudImage Src="@lcCategoryForm.ImageUrl" Alt="Image for Upload" Elevation="25" Class="rounded-lg yx-img" />
                            </MudPaper>
                        }
                        else
                        {
                            <MudPaper Height="230px" Width="386px" Outlined="true" Class="@DragClass">
                                <MudText Class="yx-center">Drop picture</MudText>
                            </MudPaper>
                        }
                    </ButtonTemplate>
                </MudFileUpload>
            </RadzenColumn>
        </RadzenStack>
        <RadzenStack>
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Englsih Translation<span class="text-danger">*</span></RadzenText>
                <RadzenFormField class="w-100">
                    <ChildContent>
                        <RadzenTextArea Name="EnglishTranslation" @bind-Value="lcCategoryForm.EnglishTranslation" class="w-100" />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="EnglishTranslation" Text="English Translation is required" Popup=true Style="position: absolute" />
                    </Helper>
                </RadzenFormField>
            </RadzenColumn>
        </RadzenStack>
        <RadzenStack>
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Original Text</RadzenText>
                <RadzenTextArea @bind-Value="lcCategoryForm.OriginalText" class="w-100" />
            </RadzenColumn>
        </RadzenStack>
        <RadzenStack>
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Romaji</RadzenText>
                <RadzenTextArea @bind-Value="lcCategoryForm.Romaji" class="w-100" />
            </RadzenColumn>
        </RadzenStack>
        <RadzenStack>
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Commentary</RadzenText>
                <RadzenTextArea @bind-Value="lcCategoryForm.Commentary" class="w-100" />
            </RadzenColumn>
        </RadzenStack>
        <RadzenStack>
            <RadzenColumn>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">
                    Record ID
                    @if (IsEditForm)
                    {
                        <span class="text-danger">*</span>
                    }
                </RadzenText>
                <RadzenFormField>
                    <ChildContent>
                        <RadzenTextBox Name="RecordIdString" @bind-Value="lcCategoryForm.RecordIdString" class="w-100" />
                    </ChildContent>
                    <Helper>
                        <RadzenCustomValidator Component="RecordIdString" Validator="@(() => ValidateRecordIdString(lcCategoryForm.RecordIdString))" Text="@validatorTextRecordIdString" Popup />
                     </Helper>
                 </RadzenFormField>
             </RadzenColumn>
         </RadzenStack>
         <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.End">
             <RadzenButton Text="Cancel" Click="closeDialog" ButtonStyle="ButtonStyle.Light" />
             <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Shine!!" Style="width: 80px;" />
         </RadzenStack>
     </RadzenStack>
 </RadzenTemplateForm>

 @code {
    [Parameter] public bool IsEditForm { get; set; }
    [Parameter] public int PassedLcCategoryId { get; set; }
    private bool imageUploaded = false;
    private IBrowserFile? imageFile;
    private LcCategoryDto lcCategoryForm = new()
        {
            AddedDateTime = DateTime.UtcNow,
            LastModifiedDateTime = DateTime.UtcNow
        };

    // Css variables
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mud-width-full mud-height-full z-10 yx-center";
    private string DragClass = DefaultDragClass;

    protected override async Task OnInitializedAsync()
    {
        if (IsEditForm)
        {
            LcCategoryDto lcCategoryDto = await ILcCategoryService.GetLcCategoryRecordById(PassedLcCategoryId);
            lcCategoryForm = lcCategoryDto.ShallowCopy();
            lcCategoryForm.ImageUrl = string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(lcCategoryForm.Image));
            imageUploaded = true;
        }
    }

    private async Task ProcessLcCategoryRecord()
    {
        try
        {
            if (!IsEditForm)
            {
                await UploadLcCategoryRecord();
            }
            else
            {
                await EditLcCategoryRecord();
            }
        }
        catch (Exception ex)
        {
            snackbarFailed(ex);
        }
    }

    private async Task UploadLcCategoryRecord()
    {
        try
        {
            LcCategoryDto lcCategoryUploadDto = new()
                {
                    Image = lcCategoryForm.Image,
                    Description = lcCategoryForm.Description.Trim(),
                    Type = lcCategoryForm.Type.Trim(),
                    AddedDateTime = DateTime.UtcNow,
                    LastModifiedDateTime = DateTime.UtcNow,
                };

            lcCategoryUploadDto = await ILcCategoryService.UploadLcCategoryRecord(lcCategoryUploadDto);

            Snackbar.Add("LcCategory Record Uploaded Successfully!~~", Severity.Success);

            closeDialog();
        }
        catch (Exception ex)
        {
            snackbarFailed(ex);
        }
    }

    private async Task EditLcCategoryRecord()
    {
        try
        {
            LcCategoryDto lcCategoryEditDto = new()
                {
                    Id = lcCategoryForm.Id,
                    Image = lcCategoryForm.Image,
                    Description = lcCategoryForm.Description.Trim(),
                    Type = lcCategoryForm.Type.Trim(),
                    LastModifiedDateTime = DateTime.UtcNow,
                };

            await ILcCategoryService.EditLcCategoryRecord(lcCategoryEditDto, PassedLcCategoryId);

            Snackbar.Add("LcCategory Record Edited Successfully!~~", Severity.Success);

            closeDialog();
        }
        catch (Exception ex)
        {
            snackbarFailed(ex);
        }
    }

    private async Task OnImageFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();

        if (imageFile != null)
        {
            Stream stream = imageFile.OpenReadStream(imageFile.Size);
            using MemoryStream memoryString = new MemoryStream();
            await stream.CopyToAsync(memoryString);
            lcCategoryForm.Image = memoryString.GetBuffer();
            lcCategoryForm.ImageUrl = string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(lcCategoryForm.Image));
        }

        imageUploaded = true;
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

    private void snackbarFailed(Exception ex)
    {
        Snackbar.Add("Something went wrong.", Severity.Error);
        Snackbar.Add(ex.ToString(), Severity.Error);
    }

    private void closeDialog()
    {
        DialogService.Close();
    }
}
