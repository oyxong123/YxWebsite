@inject Radzen.DialogService DialogService

<Cropper @ref="cropper" Source=@imageUri SelectionChanged="@OnSelectionChanged" SelectionOptions="cropperSelectionOptions" Style="aspect-ratio: 1 / 1; height: 60%; padding: 3px" />
<RadzenStack Orientation="Radzen.Orientation.Horizontal" class="p-3">
    <RadzenButton Click="GetCroppedImage" Text="Crop" Disabled="cropButtonDisabled" />
    <RadzenButton Click="ResetSelection" Text="Reset" Disabled="cropButtonDisabled" />
</RadzenStack>

@code {
    [Parameter] public byte[] ImageBytes { get; set; } = Array.Empty<byte>();
    private string imageUri { get; set; } = "";
    private bool cropButtonDisabled = false;
    private Cropper cropper = new();
    private CropperSelectionOptions cropperSelectionOptions = new()
        {
            InitialCoverage = 1,
            InitialAspectRatio = CropperAspectRatio.Is16x9
        };

    protected override void OnInitialized()
    {
        imageUri = string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(ImageBytes));
    }

    private Task OnSelectionChanged(CropperSelectionChangedEventArgs eventArgs)
    {
        if (eventArgs.Width != 0)
        {
            cropButtonDisabled = false;
            return InvokeAsync(StateHasChanged);
        }
        return Task.CompletedTask;
    }

    private async Task GetCroppedImage()
    {
        string imageResultBase64 = await cropper.CropAsBase64ImageAsync(new() { Width = 250, Height = 250 });
        imageResultBase64 = imageResultBase64.Substring(imageResultBase64.LastIndexOf(',') + 1);
        ImageBytes = System.Convert.FromBase64String(imageResultBase64);
        DialogService.Close(ImageBytes);
    }

    private async Task ResetSelection()
    {
        cropButtonDisabled = true;
        await cropper.ResetSelection();
    }
}